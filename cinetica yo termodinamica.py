# -*- coding: utf-8 -*-
"""cinetica_termodinamica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/inefable12/UNMSM_quimica_2023/blob/main/cinetica_termodinamica.ipynb

<br>
<br>
<br>
<br>
<br>

<font size='6' style="color:#00A6D6">  <b>Cinética y Termodinámica</b> </font>
<a name="loading"></a>

<font size='4' style="color:#00A6D6">  <b>Jesus Alvarado-Huayhuaz

</b> </font>
<a name="loading"></a>

## [1] Instalación de librerías
"""

# Commented out IPython magic to ensure Python compatibility.
#   %%capture
  !pip install rdkit
  !pip install pyscf

# Importamos librerías
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem import AllChem
from rdkit.Chem.Draw import IPythonConsole
IPythonConsole.drawOptions.addAtomIndices = True
from pyscf import gto, scf

"""## [2] Estructuras

### Isómero CIS
"""

# representación SMILES del isómero CIS
smi_cis = "F\C=C/C"
# elemento de RDKit
cis = Chem.MolFromSmiles(smi_cis)
# agregamos sus hidrógenos
cis = Chem.AddHs(cis)
# etiquetamos sus átomos y generamos sus coordenadas usando una semilla
Chem.AllChem.EmbedMolecule(cis, useRandomCoords=False,randomSeed=1234)
# guardamos a un archivo XYZ
Chem.MolToXYZFile(cis, "cis.xyz")



# visualizamos las coordenadas en el archivo XYZ
!cat initial_cis.xyz

"""### Isómero TRANS"""

smi_trans = "F/C=C/C"
trans = Chem.MolFromSmiles(smi_trans)
trans = Chem.AddHs(trans)
Chem.AllChem.EmbedMolecule(trans, useRandomCoords=False,randomSeed=1234)
Chem.MolToXYZFile(trans, "trans.xyz")

trans

!cat trans.xyz

"""### Diedro = 90.0 º"""

Chem.AllChem.SetDihedralDeg(cis.GetConformer(0),3,2,1,0,90.0)
Chem.MolToXYZFile(cis, "diedro90.xyz")
cis

!cat diedro90.xyz

"""## [3] Cálculo de energía

### CIS
"""

cis = gto.M(atom="cis.xyz")

cis.basis = "6-31G"
mf_cis = cis.KS()
mf_cis.xc = 'b3lyp'

resultado_cis = mf_cis.kernel()
resultado_cis

"""### Diedro 90"""

cis_90 = gto.M(atom="diedro90.xyz")

cis_90.basis = "6-31G"
mf_90 = cis_90.KS()
mf_90.xc = 'b3lyp'

resultado_cis_90 = mf_90.kernel()
resultado_cis_90

"""### TRANS"""

trans = gto.M(atom="trans.xyz")

trans.basis = "6-31G"
mf_trans = trans.KS()
mf_trans.xc = 'b3lyp'

resultado_trans= mf_trans.kernel()
resultado_trans

"""## 4. Gráfica"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install git+https://github.com/giacomomarchioro/PyEnergyDiagrams

import matplotlib.pyplot as plt
from energydiagram import ED

diagram = ED()
diagram.add_level(resultado_cis,'Cis',color='y')
diagram.add_level(resultado_cis_90,'TS',color='r')
diagram.add_level(resultado_trans,'trans',color='g')

diagram.add_link(0,1)
diagram.add_link(1,2)
diagram.plot(ylabel="Energy") # / $kcal$ $mol^{-1}$")

"""## Cinética:"""

E_activacion = resultado_cis_90 - resultado_cis
E_activacion

"""## Termodinámica"""

entalpia = resultado_trans - resultado_cis
if entalpia>0:
  print("La reacción es endotérmica")
else:
    print("La reacción es exotérmica")